/**
 * Versioning Module for eXist-db XQuery
 * Copyright (C) 2008 eXist-db <exit-open@lists.sourceforge.net>
 * http://exist-db.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 1, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
package org.exist.versioning.xquery;

import org.exist.xquery.BasicFunction;
import org.exist.xquery.FunctionSignature;
import org.exist.xquery.Cardinality;
import org.exist.xquery.XQueryContext;
import org.exist.xquery.XPathException;
import org.exist.xquery.value.SequenceType;
import org.exist.xquery.value.Type;
import org.exist.xquery.value.Sequence;
import org.exist.xquery.value.NodeValue;
import org.exist.xquery.value.DateTimeValue;
import org.exist.dom.QName;
import org.exist.dom.persistent.DocumentImpl;
import org.exist.dom.persistent.NodeProxy;
import org.exist.dom.memtree.MemTreeBuilder;
import org.exist.dom.memtree.DocumentBuilderReceiver;
import org.exist.versioning.VersioningTrigger;
import org.exist.versioning.Diff;
import org.exist.versioning.StandardDiff;
import org.exist.versioning.DiffException;
import org.xml.sax.SAXException;

import java.util.Properties;
import java.util.Date;

public class DiffFunction extends BasicFunction {

    public final static FunctionSignature signature =
            new FunctionSignature(
                    new QName( "diff", VersioningModule.NAMESPACE_URI, VersioningModule.PREFIX ),
                    "Returns a diff between two documents (which normally means two " +
                    "versions of the same document). Both documents should be stored in the " +
                    "database. The function will not work with in-memory documents. The returned " +
                    "diff uses the same format as generated by the VersioningTrigger.",
                    new SequenceType[] {
                            new SequenceType(Type.NODE, Cardinality.EXACTLY_ONE),
                            new SequenceType(Type.NODE, Cardinality.EXACTLY_ONE)
                    },
                    new SequenceType( Type.NODE, Cardinality.EXACTLY_ONE )
            );

    public DiffFunction(final XQueryContext context) {
        super(context, signature);
    }

    @Override
    public Sequence eval(final Sequence[] args, final Sequence contextSequence) throws XPathException {
        final NodeValue nv1 = (NodeValue) args[0].itemAt(0);
        final NodeValue nv2 = (NodeValue) args[1].itemAt(0);
        if (nv1.getImplementationType() != NodeValue.PERSISTENT_NODE ||
                nv2.getImplementationType() != NodeValue.PERSISTENT_NODE) {
            throw new XPathException(this, "diff function only works on persistent documents stored in the db");
        }
        final DocumentImpl doc1 = ((NodeProxy)nv1).getOwnerDocument();
        final DocumentImpl doc2 = ((NodeProxy)nv2).getOwnerDocument();

        context.pushDocumentContext();
        try {
            final MemTreeBuilder builder = context.getDocumentBuilder();
            final DocumentBuilderReceiver receiver = new DocumentBuilderReceiver(builder);
            final Properties properties = new Properties();
            properties.setProperty("document", doc1.getURI().toString());
            properties.setProperty("revision", "");
            properties.setProperty("date", new DateTimeValue(new Date()).getStringValue());
            properties.setProperty("user", context.getSubject().getName());

            final int nodeNr = builder.startElement(VersioningTrigger.ELEMENT_VERSION, null);
            VersioningTrigger.writeProperties(receiver, properties);

            final Diff diff = new StandardDiff(context.getBroker());
            diff.diff(doc1, doc2);
            diff.diff2XML(receiver);

            builder.endElement();
            return builder.getDocument().getNode(nodeNr);
        } catch (final SAXException | DiffException e) {
            throw new XPathException(this, "Caugt error while generating diff: " + e.getMessage(), e);
        } finally {
            context.popDocumentContext();
        }
    }
}
